export default Event;

const handleInputChange = (e) => {
  const { name, value } = e.target;
  setParticipant((prevState) => ({
    ...prevState,
    [name]: value,
  }));
};

const handlePayment = async (e) => {
  e.preventDefault();
  setLoading(true);
  setError(null);

  try {
    if (!eventDetails) {
      setError("Event details not loaded");
      return;
    }

    const payload = {
      amount: eventDetails.price * 100,
      currency: "INR",
      receipt: `receipt#${Math.random().toString(36).substring(7)}`,
      notes: {
        eventTitle: eventDetails.title,
        eventDescription: eventDetails.description,
      },
    };

    const { data: order } = await axios.post(
      "http://localhost:8080/create-order",
      payload
    );

    const options = {
      key: "rzp_test_yime1L5rinM9tw",
      amount: order.amount,
      currency: order.currency,
      name: eventDetails.title || "Your Company Name",
      description: eventDetails.description || "Event Registration",
      order_id: order.id,
      handler: function (response) {
        alert(
          `Payment successful! Payment ID: ${response.razorpay_payment_id}`
        );
        console.log("Razorpay Order ID:", response.razorpay_order_id);
        console.log("Razorpay Payment ID:", response.razorpay_payment_id);
        console.log("Razorpay Signature:", response.razorpay_signature);

        axios
          .post("http://localhost:8080/verify-payment", {
            razorpay_order_id: response.razorpay_order_id,
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_signature: response.razorpay_signature,
            participantName: participant.name,
            participantEmail: participant.email,
            participantPhone: participant.phone,
            participantCollege: participant.college,
            participantEvent: eventDetails.title,
            amount: order.amount,
          })
          .then(() => {
            axios
              .post("http://localhost:8080/update-slots", {
                eventId: eventDetails.id, // Use eventId here
              })
              .then(() => {
                alert("Payment verified and slots updated successfully!");
              })
              .catch((error) => {
                console.error("Slots update failed", error);
                setError("Slots update failed");
              });
          })
          .catch((error) => {
            console.error("Payment verification failed", error);
            setError("Payment verification failed");
          });
      },
      prefill: {
        name: participant.name,
        email: participant.email,
        contact: participant.phone,
      },
      theme: {
        color: "#3399cc",
      },
    };

    const rzp = new window.Razorpay(options);
    rzp.open();
  } catch (error) {
    console.error("Order creation failed:", error);
    setError("Order creation failed");
  } finally {
    setLoading(false);
  }
}

<div>
<form className="flex flex-col gap-2">
<input
  type="text"
  name="college"
  className="p-2 text-center rounded-xl text-black"
  placeholder="College"
  value={participant.college}
  onChange={handleInputChange}
/>
<input
  type="text"
  name="name"
  className="p-2 text-center rounded-xl text-black"
  placeholder="Name"
  value={participant.name}
  onChange={handleInputChange}
/>
<input
  type="email"
  name="email"
  className="p-2 text-center rounded-xl text-black"
  placeholder="Email"
  value={participant.email}
  onChange={handleInputChange}
/>
<input
  type="text"
  name="phone"
  className="p-2 text-center rounded-xl text-black"
  placeholder="Phone"
  value={participant.phone}
  onChange={handleInputChange}
/>
</form>
<button
className="bg-dark-500 mt-[2.5rem] border-[1px] hover:bg-blue-300 hover:text-blue-800 text-white font-bold py-2 px-[3rem] rounded-full focus:outline-none font-orbitron focus:shadow-outline border-sky-200 shadow-[0_0_2px_#fff,inset_0_0_2px_#fff,0_0_5px_#08f,0_0_15px_#08f,0_0_30px_#08f]"
onClick={handlePayment}
disabled={loading}
>
{loading ? "Processing..." : "Register Now"}
</button>
<p className="text-yellow-500 italic">
{eventDetails.totalSlot} slots available
</p>
</div>